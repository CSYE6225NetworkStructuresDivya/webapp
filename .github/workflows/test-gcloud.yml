name: Test GCloud
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-gcloud:
    runs-on: ubuntu-latest
    env:
      GCLOUD_CRED: ${{ secrets.GCP_CREDENTIALS }}
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: cloud_assignment
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCLOUD_CRED }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Use gcloud CLI
        run: gcloud info

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build package
        run: mvn clean package

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run Packer INIT
        run: packer init ./packer/compute-mi.pkr.hcl

      - name: Validate Packer Template
        run: packer validate ./packer/compute-mi.pkr.hcl

      - name: Build Packer Template
        run: packer build ./packer/compute-mi.pkr.hcl

      - name: Get Image ID
        id: get_image_id
        run: |
          IMAGE_ID=$(gcloud compute images list --format='value(name)' --filter='name:packer-*' --sort-by='~creationTimestamp' --limit=1)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Get Key Ring name
        id: get_key_ring
        run: |
          KEY_RING=$(gcloud secrets versions access latest --secret=kmskeyring --format='get(payload.data)' | base64 --decode)
          echo "KEY_RING=$KEY_RING" >> $GITHUB_ENV

      - name: Get Instance Key Name
        id: get_instance_key
        run: |
          INSTANCE_KEY=$(gcloud secrets versions access latest --secret=vmkmscryptokey --format='get(payload.data)' | base64 --decode)
          echo "INSTANCE_KEY=$INSTANCE_KEY" >> $GITHUB_ENV

      - name: Get Instance Manager Name
        id: get_instance_manager
        run: |
          INSTANCE_MANAGER=$(gcloud secrets versions access latest --secret=instancemanagername --format='get(payload.data)' | base64 --decode)
          echo "INSTANCE_MANAGER=$INSTANCE_MANAGER" >> $GITHUB_ENV

      - name: Get Datasource url
        id: get_datasource_url
        run: |
          DATASOURCE_URL=$(gcloud secrets versions access latest --secret=datasourceurl --format='get(payload.data)' | base64 --decode)
          echo "DATASOURCE_URL=$DATASOURCE_URL" >> $GITHUB_ENV

      - name: Get Datasource username
        id: get_datasource_username
        run: |
          DATASOURCE_USERNAME=$(gcloud secrets versions access latest --secret=dbuser --format='get(payload.data)' | base64 --decode)
          echo "DATASOURCE_USERNAME=$DATASOURCE_USERNAME" >> $GITHUB_ENV

      - name: Get Datasource password
        id: get_datasource_password
        run: |
          DATASOURCE_PASSWORD=$(gcloud secrets versions access latest --secret=dbpassword --format='get(payload.data)' | base64 --decode)
          echo "DATASOURCE_PASSWORD=$DATASOURCE_PASSWORD" >> $GITHUB_ENV

      - name: Get pub-sub topic name
        id: get_pubsub_topic
        run: |
          PUBSUB_TOPIC=$(gcloud secrets versions access latest --secret=pubsubtopicname --format='get(payload.data)' | base64 --decode)
          echo "PUBSUB_TOPIC=$PUBSUB_TOPIC" >> $GITHUB_ENV

      - name: Print all secrets
        run: |
          echo "Image id id $IMAGE_ID"
          echo "Key ring is $KEY_RING"
          echo "Instance key is $INSTANCE_KEY"
          echo "Instance manager is $INSTANCE_MANAGER"
          echo "Datasource url is $DATASOURCE_URL"
          echo "Datasource username is $DATASOURCE_USERNAME"
          echo "Datasource password is $DATASOURCE_PASSWORD"
          echo "Pubsub topic is $PUBSUB_TOPIC"


      - name: Create new test instance template
        run: |
          gcloud compute instance-templates create packer-instance-template--${{ github.run_number }} \
            --description="This is the packer instance template" \
            --machine-type=e2-medium \
            --no-can-ip-forward \
            --instance-template-region=us-east1 \
            --image=$IMAGE_ID \
            --image-project=cloud-csye-6225 \
            --boot-disk-auto-delete \
            --boot-disk-type=pd-balanced \
            --boot-disk-size=50GB \
            --boot-disk-kms-key=projects/cloud-csye-6225/locations/us-east1/keyRings/$KEY_RING/cryptoKeys/$INSTANCE_KEY \
            --subnet=projects/cloud-csye-6225/regions/us-east1/subnetworks/webapp \
            --service-account=logging-monitoring-sa@cloud-csye-6225.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring,https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/cloudkms \
            --tags=webapp \
            --metadata=startup-script='#! /bin/bash
              if [ ! -f "/opt/csye6225/application.properties" ]; then
              {
                echo "spring.jpa.hibernate.ddl-auto=update"
                echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver"
                echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect"
                echo "spring.datasource.type=org.springframework.jdbc.datasource.SimpleDriverDataSource"
                echo "spring.datasource.hikari.connection-timeout=2000"
                echo "spring.datasource.url=$DATASOURCE_URL"
                echo "spring.datasource.username=$DATASOURCE_USERNAME"
                echo "spring.datasource.password=$DATASOURCE_PASSWORD"
              echo "gcloud_pubsub_topic_id=$PUBSUB_TOPIC"
              } >> /opt/csye6225/application.properties
              sudo chown csye6225:csye6225 /opt/csye6225/application.properties
              sudo chmod 660 /opt/csye6225/application.properties
              touch /tmp/metadata-test.txt
              fi'

      - name: Print metadata
        run: |
          gcloud compute instance-templates describe packer-instance-template--${{ github.run_number }} --format='get(properties.metadata)'

      - name: Create new instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_MANAGER \
            --version='template=projects/cloud-csye-6225/regions/us-east1/instanceTemplates/packer-instance-template--${{ github.run_number }}' \
            --project=cloud-csye-6225 \
            --region=us-east1 \
            --max-surge=3 \
            --max-unavailable=3 \
            --quiet

      - name: Wait for instance group to update
        run: |
          gcloud compute instance-groups managed wait-until --version-target-reached $INSTANCE_MANAGER \
          --project=cloud-csye-6225 \
          --region=us-east1