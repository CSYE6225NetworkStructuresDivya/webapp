name: Test GCloud
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-gcloud:
    runs-on: ubuntu-latest
    env:
      GCLOUD_CRED: ${{ secrets.GCP_CREDENTIALS }}
      STARTUP_SCRIPT: ${{ secrets.METADATA_STARTUP_SCRIPT }}
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: cloud_assignment
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCLOUD_CRED }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Use gcloud CLI
        run: gcloud info

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build package
        run: mvn clean package

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run Packer INIT
        run: packer init ./packer/compute-mi.pkr.hcl

      - name: Validate Packer Template
        run: packer validate ./packer/compute-mi.pkr.hcl

      - name: Build Packer Template
        run: packer build ./packer/compute-mi.pkr.hcl

      - name: Get Image ID
        id: get_image_id
        run: |
          IMAGE_ID=$(gcloud compute images list --format='value(name)' --filter='name:packer-*' --sort-by='~creationTimestamp' --limit=1)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Get Key Ring name
        id: get_key_ring
        run: |
          KEY_RING=$(gcloud secrets versions access latest --secret=kmskeyring --format='get(payload.data)' | base64 --decode)
          echo "KEY_RING=$KEY_RING" >> $GITHUB_ENV

      - name: Get Instance Key Name
        id: get_instance_key
        run: |
          INSTANCE_KEY=$(gcloud secrets versions access latest --secret=vmkmscryptokey --format='get(payload.data)' | base64 --decode)
          echo "INSTANCE_KEY=$INSTANCE_KEY" >> $GITHUB_ENV

      - name: Get Instance Manager Name
        id: get_instance_manager
        run: |
          INSTANCE_MANAGER=$(gcloud secrets versions access latest --secret=instancemanagername --format='get(payload.data)' | base64 --decode)
          echo "INSTANCE_MANAGER=$INSTANCE_MANAGER" >> $GITHUB_ENV

#      - name: Get Metadata startup script encoded
#        id: get_metadata
#        run: |
#          gcloud secrets versions access latest --secret=metadatastartupscript --format='get(payload.data)' > encoded.txt
#
#      - name: Decode Metadata startup script
#        id: decode_metadata
#        run: |
#          base64 -d encoded.txt > metadata.txt
#
      - name : Print Metadata startup script
        run: |
          echo "Metadata startup script: ${{ env.STARTUP_SCRIPT }}"


      - name: Create new test instance template
        run: |
          gcloud compute instance-templates create packer-instance-template--${{ github.run_number }} \
            --description="This is the packer instance template" \
            --machine-type=e2-medium \
            --no-can-ip-forward \
            --instance-template-region=us-east1 \
            --image=$IMAGE_ID \
            --image-project=cloud-csye-6225 \
            --boot-disk-auto-delete \
            --boot-disk-type=pd-balanced \
            --boot-disk-size=50GB \
            --boot-disk-kms-key=projects/cloud-csye-6225/locations/us-east1/keyRings/$KEY_RING/cryptoKeys/$INSTANCE_KEY \
            --subnet=projects/cloud-csye-6225/regions/us-east1/subnetworks/webapp \
            --service-account=logging-monitoring-sa@cloud-csye-6225.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring,https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/cloudkms \
            --tags=webapp \
            --metadata=startup-script=${{ env.STARTUP_SCRIPT }} \

      - name: Create new instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_MANAGER \
            --version='template=projects/cloud-csye-6225/regions/us-east1/instanceTemplates/packer-instance-template--${{ github.run_number }}' \
            --project=cloud-csye-6225 \
            --region=us-east1 \
            --max-surge=3 \
            --max-unavailable=3 \
            --quiet

      - name: Wait for instance group to update
        run: |
          gcloud compute instance-groups managed wait-until --version-target-reached $INSTANCE_MANAGER \
          --project=cloud-csye-6225 \
          --region=us-east1